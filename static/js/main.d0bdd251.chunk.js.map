{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","SORT_FIELD_ALPHABET","SORT_FIELD_LENGTH","App","_useState","useState","_useState2","_slicedToArray","sortField","setSortField","_useState3","_useState4","reverseField","setReverseField","visibleGoods","goods","_ref","prepearedGoods","_toConsumableArray","sort","good1","good2","localeCompare","length","reverse","getPrepareGoods","_jsxs","className","children","_jsx","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"iPAKaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAAsB,WACtBC,EAAoB,SA2BnB,IAAMC,EAAM,WACjB,IAAAC,EAAkCC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAAvCI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAC9BI,EAAwCL,oBAAS,GAAMM,EAAAJ,YAAAG,EAAA,GAAhDE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GAE9BG,EA7BR,SAAyBC,EAAKC,GAAgC,IAA5BR,EAASQ,EAATR,UAAWI,EAAYI,EAAZJ,aACrCK,EAAcC,YAAOH,GAqB3B,OAnBIP,GACFS,EAAeE,MAAK,SAACC,EAAOC,GAC1B,OAAQb,GACN,KAAKP,EACH,OAAOmB,EAAME,cAAcD,GAE7B,KAAKnB,EACH,OAAOkB,EAAMG,OAASF,EAAME,OAE9B,QACE,OAAO,MAKXX,GACFK,EAAeO,UAGVP,EAOcQ,CAAgBzB,EACnC,CAAEQ,YAAWI,iBAEf,OACEc,eAAA,OAAKC,UAAU,kBAAiBC,SAAA,CAC9BF,eAAA,OAAKC,UAAU,UAASC,SAAA,CACtBC,cAAA,UACEC,KAAK,SACLH,UAAWI,IAAG,iBACZ,CAAE,WAAYvB,IAAcP,IAC9B+B,QAAS,kBAAMvB,EAAaR,IAAqB2B,SAClD,wBAIDC,cAAA,UACEC,KAAK,SACLH,UAAWI,IAAG,oBACZ,CAAE,WAAYvB,IAAcN,IAC9B8B,QAAS,kBAAMvB,EAAaP,IAAmB0B,SAChD,mBAIDC,cAAA,UACEC,KAAK,SACLH,UAAWI,IAAG,oBACZ,CAAE,YAAanB,IACjBoB,QAAS,kBAAMnB,GAAiBD,IAAcgB,SAC/C,aAICpB,GAAaI,IACbiB,cAAA,UACEC,KAAK,SACLH,UAAU,4BACVK,QAAS,WACPvB,EAAa,IACbI,GAAgB,IAChBe,SACH,aAMLC,cAAA,MAAAD,SACGd,EAAamB,KAAI,SAAAC,GAAI,OACpBL,cAAA,MAAI,UAAQ,OAAMD,SACfM,GADqBA,YChGlCC,IAASC,OACPP,cAAC1B,EAAG,IACJkC,SAASC,eAAe,W","file":"static/js/main.d0bdd251.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport { useState } from 'react';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_FIELD_ALPHABET = 'alphabet';\nconst SORT_FIELD_LENGTH = 'length';\n\nfunction getPrepareGoods(goods, { sortField, reverseField }) {\n  const prepearedGoods = [...goods];\n\n  if (sortField) {\n    prepearedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SORT_FIELD_ALPHABET:\n          return good1.localeCompare(good2);\n\n        case SORT_FIELD_LENGTH:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverseField) {\n    prepearedGoods.reverse();\n  }\n\n  return prepearedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [reverseField, setReverseField] = useState(false);\n\n  const visibleGoods = getPrepareGoods(goodsFromServer,\n    { sortField, reverseField });\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button is-info',\n            { 'is-light': sortField !== SORT_FIELD_ALPHABET })}\n          onClick={() => setSortField(SORT_FIELD_ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-success',\n            { 'is-light': sortField !== SORT_FIELD_LENGTH })}\n          onClick={() => setSortField(SORT_FIELD_LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-warning',\n            { 'is-light': !reverseField })}\n          onClick={() => setReverseField(!reverseField)}\n        >\n          Reverse\n        </button>\n\n        {(sortField || reverseField) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setSortField('');\n              setReverseField(false);\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}